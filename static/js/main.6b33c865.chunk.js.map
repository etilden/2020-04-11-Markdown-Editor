{"version":3,"sources":["codeEditor.js","converter.js","App.js","serviceWorker.js","index.js"],"names":["CodeEditor","props","value","code","onChange","updateCode","options","lineNumbers","App","markdown","tables","emoji","newCode","words","split","length","setState","chars","state","bind","className","this","href","color","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iUAceA,MATf,SAAoBC,GAIlB,OACE,kBAAC,IAAD,CAAYC,MAAOD,EAAME,KAAMC,SAAUH,EAAMI,WAAYC,QAJ/C,CACZC,aAAa,M,QCJF,SAASC,EAAIP,GAC1B,IAAMQ,EAAWR,EAAME,KAEvB,OACE,kBAAC,IAAD,CACEM,SAAUA,EACVH,QAAS,CAAEI,QAAQ,EAAMC,OAAO,K,ICkCvBH,E,kDArCb,aAAe,IAAD,8BACZ,gBASFH,WAAa,SAACO,GACZ,IAAIC,EAAQ,EACRD,IACFC,EAAQD,EAAQE,MAAM,KAAKC,QAE/B,EAAKC,SAAS,CACbb,KAAMS,EAASK,MAAOL,EAAQG,OAAQF,WAdrC,EAAKK,MAAQ,CACXf,KAAM,UACNU,MAAO,EACPI,MAAO,GAET,EAAKZ,WAAa,EAAKA,WAAWc,KAAhB,gBAPN,E,qDAoBZ,OACE,yBAAKC,UAAY,SACf,wBAAIA,UAAY,cAAhB,kBACA,yBAAKA,UAAY,mBACf,2BAAIC,KAAKH,MAAML,MAAf,UACA,2BAAIQ,KAAKH,MAAMD,MAAf,gBAEF,yBAAKG,UAAY,OACf,yBAAKA,UAAY,OAAM,kBAAC,EAAD,CAAYf,WAAcgB,KAAKhB,WAAYF,KAAQkB,KAAKH,MAAMf,QACrF,yBAAKiB,UAAY,OAAM,kBAAC,EAAD,CAAWjB,KAAQkB,KAAKH,MAAMf,SAEvD,yBAAKiB,UAAY,UAAjB,sBAA6C,uBAAGE,KAAK,6BAA6BC,MAAO,SAA5C,WAA7C,wB,GAhCUC,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6b33c865.chunk.js","sourcesContent":["import React from 'react';\nimport CodeMirror from 'react-codemirror';\n// import './codeEditor.css'\nimport 'codemirror/lib/codemirror.css';\n\nfunction CodeEditor(props) {\n  var options = {\n    lineNumbers: true\n  };\n  return (\n    <CodeMirror value={props.code} onChange={props.updateCode} options={options} />\n  )\n}\n\nexport default CodeEditor\n","import React from 'react'\nimport MarkdownView from 'react-showdown'\n\nexport default function App(props) {\n  const markdown = props.code;\n\n  return (\n    <MarkdownView\n      markdown={markdown}\n      options={{ tables: true, emoji: true }}\n    />\n  );\n};","import React from 'react';\nimport './App.css';\nimport CodeEditor from './codeEditor';\nimport Converter from './converter'\n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      code: '// Code',\n      words: 2,\n      chars: 7\n    }\n    this.updateCode = this.updateCode.bind(this)\n  }\n\n  updateCode = (newCode) => {\n    let words = 0; \n    if (newCode) {\n      words = newCode.split(' ').length\n    }\n\t\tthis.setState({\n\t\t\tcode: newCode, chars: newCode.length, words\n\t\t});\n\t} \n  render() {\n    return (\n      <div className = \"whole\">\n        <h1 className = \"App-header\">Code Converter</h1>\n        <div className = \"additional-info\">\n          <p>{this.state.words} words</p>\n          <p>{this.state.chars} characters</p>\n        </div>\n        <div className = \"row\">\n          <div className = \"col\"><CodeEditor updateCode = {this.updateCode} code = {this.state.code}/></div>\n          <div className = \"col\"><Converter code = {this.state.code} /></div>\n        </div>\n        <div className = \"footer\">Built with love by <a href=\"https://github.com/etilden\" color =\"white\">etilden</a> in Chicago, IL</div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}